<!-- Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with 3 sides of equal length.
Isosceles: It's a triangle with 2 sides of equal length.
Scalene: It's a triangle with 3 sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

Input Format
The TRIANGLES table is described as follows:
![alt text](image.png)

Each row in the table denotes the lengths of each of a triangle's three sides.

Sample Input
![alt text](image-1.png)

Sample Output
Isosceles
Equilateral
Scalene
Not A Triangle

Explanation
Values in the tuple (20,20,23) form an Isosceles triangle, because A=B.
Values in the tuple (20,20,20) form an Equilateral triangle, because A=B=C. Values in the tuple (20,21,22) form a Scalene triangle, because A=/B=/C.
Values in the tuple (13,14,30) cannot form a triangle because the combined value of sides A and B is not larger than that of side C. -->



<!-- ___Answer -->

<!-- SELECT
    CASE
        WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle'
        WHEN A = B AND B = C THEN 'Equilateral'
        WHEN A = B OR B = C OR A = C THEN 'Isosceles'
        ELSE 'Scalene'
    END AS Type
FROM
    TRIANGLES; -->





<!-- Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

Note: There will be at least two entries in the table for each type of occupation.

Input Format
The OCCUPATIONS table is described as follows: 
![alt text](image-2.png)

 Occupation will only contain one of the following values: Doctor, Professor, Singer or Actor.

Sample Input
An OCCUPATIONS table that contains the following records:
![alt text](image-3.png)


Sample Output
Ashely(P)
Christeen(P)
Jane(A)
Jenny(D)
Julia(A)
Ketty(P)
Maria(A)
Meera(S)
Priya(S)
Samantha(D)
There are a total of 2 doctors.
There are a total of 2 singers.
There are a total of 3 actors.
There are a total of 3 professors.

Explanation
The results of the first query are formatted to the problem description's specifications.
The results of the second query are ascendingly ordered first by number of names corresponding to each profession (2<=2<=3<=3), and then alphabetically by profession (doctor<=singer , and actor <= professor). -->




<!-- SELECT 
    Name || '(' || SUBSTR(Occupation, 1, 1) || ')' AS NameProfession
FROM 
    OCCUPATIONS
ORDER BY 
    Name;

SELECT 
    'There are a total of ' || COUNT(*) || ' ' || LOWER(Occupation) || 's.' AS Occurrences
FROM 
    OCCUPATIONS
GROUP BY 
    Occupation
ORDER BY 
    COUNT(*) ASC, Occupation ASC; -->








<!-- You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
![alt text](image-4.png)


Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.


Sample Input
![alt text](image-5.png)


Sample Output
1 Leaf
2 Inner
3 Leaf
5 Root
6 Leaf
8 Inner
9 Leaf

Explanation

The Binary Tree below illustrates the sample:
![alt text](image-6.png) -->




<!-- SELECT 
    N, 
    CASE
        WHEN P IS NULL THEN 'Root'
        WHEN N NOT IN (SELECT P FROM BST WHERE P IS NOT NULL) THEN 'Leaf'
        ELSE 'Inner'
    END AS NodeType
FROM 
    BST
ORDER BY 
    N; -->



<!-- 


Amber's conglomerate corporation just acquired some new companies. Each of the companies follows this hierarchy: 
![alt text](image-7.png)

Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.

Note:
The tables may contain duplicate records.
The company_code is string, so the sorting should not be numeric. For example, if the company_codes are C_1, C_2, and C_10, then the ascending company_codes will be C_1, C_10, and C_2.

Input Format
The following tables contain company data:
Company: The company_code is the code of the company and founder is the founder of the company. 
![alt text](image-8.png)

Lead_Manager: The lead_manager_code is the code of the lead manager, and the company_code is the code of the working company. 
![alt text](image-9.png)

Senior_Manager: The senior_manager_code is the code of the senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. 
![alt text](image-10.png)

Manager: The manager_code is the code of the manager, the senior_manager_code is the code of its senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. 
![alt text](image-11.png)

Employee: The employee_code is the code of the employee, the manager_code is the code of its manager, the senior_manager_code is the code of its senior manager, the lead_manager_code is the code of its lead manager, and the company_code is the code of the working company. 
![alt text](image-12.png)

Sample Input
Company Table:
![alt text](image-13.png)

Lead_Manager Table:
![alt text](image-14.png)

Senior_Manager Table: 
![alt text](image-15.png)

Manager Table: 
![alt text](image-16.png) 

Employee Table: 
![alt text](image-17.png)

Sample Output
C1 Monika 1 2 1 2
C2 Samantha 1 1 2 2

Explanation
In company C1, the only lead manager is LM1. There are two senior managers, SM1 and SM2, under LM1. There is one manager, M1, under senior manager SM1. There are two employees, E1 and E2, under manager M1.

In company C2, the only lead manager is LM2. There is one senior manager, SM3, under LM2. There are two managers, M2 and M3, under senior manager SM3. There is one employee, E3, under manager M2, and another employee, E4, under manager, M3. -->





<!-- 
SELECT 
    c.company_code, 
    c.founder, 
    COALESCE(lm.lead_manager_count, 0) AS lead_manager_count, 
    COALESCE(sm.senior_manager_count, 0) AS senior_manager_count, 
    COALESCE(m.manager_count, 0) AS manager_count, 
    COALESCE(e.employee_count, 0) AS employee_count
FROM 
    Company c
LEFT JOIN 
    (SELECT company_code, COUNT(DISTINCT lead_manager_code) AS lead_manager_count 
     FROM Lead_Manager 
     GROUP BY company_code) lm ON c.company_code = lm.company_code
LEFT JOIN 
    (SELECT company_code, COUNT(DISTINCT senior_manager_code) AS senior_manager_count 
     FROM Senior_Manager 
     GROUP BY company_code) sm ON c.company_code = sm.company_code
LEFT JOIN 
    (SELECT company_code, COUNT(DISTINCT manager_code) AS manager_count 
     FROM Manager 
     GROUP BY company_code) m ON c.company_code = m.company_code
LEFT JOIN 
    (SELECT company_code, COUNT(DISTINCT employee_code) AS employee_count 
     FROM Employee 
     GROUP BY company_code) e ON c.company_code = e.company_code
ORDER BY 
    c.company_code; -->
