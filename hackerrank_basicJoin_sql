-- -- Given the CITY and COUNTRY tables, query the names of all cities where
-- --  the CONTINENT is 'Africa'.
-- -- Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

-- SELECT CITY.Name
-- FROM CITY
-- JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code
-- WHERE COUNTRY.Continent = 'Africa';




-- -- Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent)
-- --  and their respective average city populations (CITY.Population) rounded down to the nearest integer.
-- -- Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

-- SELECT COUNTRY.Continent, FLOOR(AVG(CITY.Population)) AS avg_city_population
-- FROM CITY
-- JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code
-- GROUP BY COUNTRY.Continent;





-- -- Given the CITY and COUNTRY tables, query the sum of the populations of all cities
-- --  where the CONTINENT is 'Asia'.
-- -- Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

-- SELECT SUM(CITY.Population) AS total_population
-- FROM CITY
-- JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code
-- WHERE COUNTRY.Continent = 'Asia';





-- Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.
-- Input Format
-- The following tables contain contest data:

-- Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker. 

-- Difficulty: The difficult_level is the level of difficulty of the challenge, and score is the score of the challenge for the difficulty level. 

-- Challenges: The challenge_id is the id of the challenge, the hacker_id is the id of the hacker who created the challenge, and difficulty_level is the level of difficulty of the challenge. 

-- Submissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made the submission, challenge_id is the id of the challenge that the submission belongs to, and score is the score of the submission. 

-- Sample Input
-- Hackers Table:  Difficulty Table:  Challenges Table:  Submissions Table: 

-- Sample Output
-- 90411 Joe

-- Explanation
-- Hacker 86870 got a score of 30 for challenge 71055 with a difficulty level of 2, so 86870 earned a full score for this challenge.
-- Hacker 90411 got a score of 30 for challenge 71055 with a difficulty level of 2, so 90411 earned a full score for this challenge.
-- Hacker 90411 got a score of 100 for challenge 66730 with a difficulty level of 6, so 90411 earned a full score for this challenge.
-- Only hacker 90411 managed to earn a full score for more than one challenge, so we print the their hacker_id and name as  space-separated values.





-- WITH FullScores AS (
--     SELECT
--         s.hacker_id,
--         h.name,
--         COUNT(s.challenge_id) AS full_score_count
--     FROM
--         Submissions s
--         JOIN Challenges c ON s.challenge_id = c.challenge_id
--         JOIN Difficulty d ON c.difficulty_level = d.difficulty_level
--         JOIN Hackers h ON s.hacker_id = h.hacker_id
--     WHERE
--         s.score = d.score
--     GROUP BY
--         s.hacker_id, h.name
--     HAVING
--         COUNT(s.challenge_id) > 1
-- )
-- SELECT
--     hacker_id,
--     name
-- FROM
--     FullScores
-- ORDER BY
--     full_score_count DESC,
--     hacker_id ASC;







-- Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
-- Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age.

-- Input Format
-- The following tables contain data on the wands in Ollivander's inventory:
-- Wands: The id is the id of the wand, code is the code of the wand, coins_needed is the total number of gold galleons needed to buy the wand, and power denotes the quality of the wand (the higher the power, the better the wand is). 
-- Wands_Property: The code is the code of the wand, age is the age of the wand, and is_evil denotes whether the wand is good for the dark arts. If the value of is_evil is 0, it means that the wand is not evil. The mapping between code and age is one-one, meaning that if there are two pairs,
-- (code1,age1) and (code2,age2), then code1 =/ code2 and age1=/age2.

-- Sample Input
-- Wands Table:  Wands_Property Table: 

-- Sample Output
-- 9 45 1647 10
-- 12 17 9897 10
-- 1 20 3688 8
-- 15 40 6018 7
-- 19 20 7651 6
-- 11 40 7587 5
-- 10 20 504 5
-- 18 40 3312 3
-- 20 17 5689 3
-- 5 45 6020 2
-- 14 40 5408 1

-- Explanation
-- The data for wands of age 45 (code 1): 
-- The minimum number of galleons needed for wand(age=45,power=2)=6020
-- The minimum number of galleons needed for 
-- wand(age=45,power=10)=1647
-- The data for wands of age 40 (code 2): 

-- The minimum number of galleons needed for 
-- wand(age=40,power=1)=5408
-- The minimum number of galleons needed for 
-- wand(age=40,power=3)=3312
-- The minimum number of galleons needed for 
-- wand(age=40,power=5)=7587
-- The minimum number of galleons needed for 
-- wand(age=40,power=7)=6018
-- The data for wands of age 20 (code 4): 

-- The minimum number of galleons needed for
-- wand(age=20,power=5)=504
-- The minimum number of galleons needed for 
-- wand(age=20,power=6)=7651
-- The minimum number of galleons needed for 
-- wand(age=20,power=8)=3688

-- The data for wands of age 17 (code 5): 

-- The minimum number of galleons needed for 
-- wand(age=17,power=3)=5689
-- The minimum number of galleons needed for 
-- wand(age=17,power=10)=9897




-- WITH MinCostWands AS (
--     SELECT
--         wp.code,
--         wp.age,
--         w.power,
--         MIN(w.coins_needed) AS min_coins_needed
--     FROM
--         Wands w
--         JOIN Wands_Property wp ON w.code = wp.code
--     WHERE
--         wp.is_evil = 0
--     GROUP BY
--         wp.code,
--         wp.age,
--         w.power
-- )
-- SELECT
--     w.id,
--     mcw.age,
--     mcw.min_coins_needed AS coins_needed,
--     mcw.power
-- FROM
--     MinCostWands mcw
--     JOIN Wands w ON mcw.code = w.code AND mcw.min_coins_needed = w.coins_needed
-- ORDER BY
--     mcw.power DESC,
--     mcw.age DESC;
